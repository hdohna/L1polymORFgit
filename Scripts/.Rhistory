##############################################
#
# General description:
#
#   The following script reads a L1 catalog and creates a separate alignment for
#   all reads that overlap the junction.
# Input:
#
#     BamFile: path to file that contains mapped reads
#     L1TableFileName: path to file that contains L1HS ranges in a table
# Output:
#
#    : ...
##############################################
######
# Source packages and set parameters
######
# Source start script
source('D:/L1polymORFgit/Scripts/_Start_L1polymORF.R')
# Load packages
library(ape)
library(ShortRead)
library(rtracklayer)
library(Rsamtools)
library(csaw)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg19)
# Files and folders
L1CataloguePath <- "D:/L1polymORF/Data/L1Catalogue_Updated_Sat_May_07_15-15-31_2016.csv"
L1CataloguePath <- "D:/L1polymORF/Data/L1Catalog_Updated_Wed_Aug_10_17-32-20_2016.csv"
FastaFolder     <- "D:/L1polymORF/Data/"
ChainFile       <- 'D:/L1polymORF/Data/hg38ToHg19.over.chain'
BamFilePath     <- 'D:/L1polymORF/Data/BZ_NA12878L1capt5-9kb_subreads_hg19withL1.sorted.bam'
# Specify the minimum read depth to create alignment
MinReadDepth <- 5
MinReadNr    <- 5
MinMapQ      <- 30
# Specify the offset from the insertion junction
JunctionOffset <- 50
#######
# Get L1 ranges
#######
cat("Getting reference L1 ranges \n")
# Read in table with known L1
L1Catalogue <- read.csv(L1CataloguePath, as.is = T)
# Retain only entries with mapped L1 insertions and allele 1
blnL1Mapped       <- !is.na(L1Catalogue$start_HG38)
blnAllele1        <- L1Catalogue$Allele == 1
L1CatalogL1Mapped <- L1Catalogue[which(blnL1Mapped & blnAllele1),]
sum(blnL1Mapped)
sum(blnAllele1, na.rm = T)
sum(blnInRef, na.rm = T)
# Lift coordinates and get genomic ranges for catalog L1 on hg19
LiftOverList <- LiftoverL1Catalog(L1CatalogL1Mapped,
ChainFilePath = ChainFile)
L1CatalogGR <- LiftOverList$GRCatalogue_hg19
L1CatalogL1Mapped <- L1CatalogL1Mapped[LiftOverList$idxUniqueMapped, ]
width(L1CatalogGR)
# Read in L1 ranges (created in script CreateHg19NonRefL1BedRanges)
L1RangesDF   <- read.table("D:/L1polymORF/Data/L1Ranges_hg19_withNonRefL1.txt", as.is = T,
header = T)
# Turn L1 ranges into a GRanges object
L1Ranges <- makeGRangesFromDataFrame(L1RangesDF)
L1RangesLeft  <- flank(L1Ranges, width = 1,  ignore.strand = T)
L1RangesRight <- flank(L1Ranges, width = 1, start = F,
ignore.strand = T)
L1RangesLeft  <- shift(L1RangesLeft, -JunctionOffset)
L1RangesRight <- shift(L1RangesRight, JunctionOffset)
ReadRangeListLeft <- lapply(1:length(L1RangesLeft), function(x){
extractReads(BamFilePath, L1RangesLeft[x], param = readParam(minq = MinMapQ))
})
ReadRangeListRight <- lapply(1:length(L1RangesRight), function(x){
extractReads(BamFilePath, L1RangesRight[x], param = readParam(minq = MinMapQ))
})
# StuffToScan <- c("pos", "seq", "strand", "rname", "cigar")
# paramScanLeft  <- ScanBamParam(which = L1RangesLeft, what = StuffToScan)
# paramScanRight <- ScanBamParam(which = L1RangesRight, what = StuffToScan)
# ReadListLeft   <- scanBam(BamFilePath, param = paramScanLeft)
# ReadListRight  <- scanBam(BamFilePath, param = paramScanRight)
# # Match
# L1RangeNames <- as.vector(seqnames(L1Ranges))
# blnRefRanges <- nchar(L1RangeNames) <= 5
# idxRefRanges <- which(blnRefRanges)
# L1RefRanges  <- L1Ranges[blnRefRanges]
# idxOverlaps  <- findOverlaps(L1RefRanges, L1CatalogGR, minoverlap = 6000)
# RangeAccession <- rep(NA, length(L1Ranges))
# RangeAccession[idxRefRanges[idxOverlaps@queryHits]] <- L1CatalogL1Mapped$Accession[idxOverlaps@subjectHits]
# RangeAccession[!blnRefRanges] <- L1RangeNames[!blnRefRanges]
#####
# Analyze insertion flanks
#####
# # Initialize a result table
# ResultTable <- L1CatalogL1Mapped[,c("Accession", "Chromosome",
#         "strand_L1toRef", "start_HG38", "end_HG38")]
# ResultTable$start_HG19  <- start(L1CatalogGR)
# ResultTable$end_HG19    <- end(L1CatalogGR)
# ResultTable$TotalNrReads  <- NA
# ResultTable$Coverage5P  <- NA
# ResultTable$Coverage3P  <- NA
# ResultTable$ReadWidth5P <- NA
# ResultTable$ReadWidth3P <- NA
# ResultTable$RelJunctPos5P <- NA
# ResultTable$RelJunctPos3P <- NA
ResultTable <- L1RangesDF
ResultTable$TotalNrReads  <- NA
ResultTable$CoverageLeft  <- sapply(ReadRangeListLeft, length)
ResultTable$CoverageRight <- sapply(ReadRangeListRight, length)
names(ResultTable)[names(ResultTable) == "name"] <- "Accession"
ResultTable$MaxCover <- pmax(ResultTable$CoverageLeft, ResultTable$CoverageRight)
# Write out results table
write.csv(ResultTable, "D:/L1polymORF/Data/L1PacBioResults.csv", row.names = F)
View(L1CatalogL1Mapped)
L1CatalogGR
library(BSgenome.Hsapiens.UCSC.hg19)
RepeatTable <- read.delim("D:/L1polymORF/Data/repeatsL1Hg19")
RepeatTable <- read.delim("D:/L1polymORF/Data/repeatsL1hg19")
RepeatTable <- read.delim("D:/L1polymORF/Data/repeatL1hg19")
RepeatTable <- read.delim("D:/L1polymORF/Data/repeatL1hg19")
BSgenome.Hsapiens.UCSC.hg19[['chr1']]
chr1Seq <- BSgenome.Hsapiens.UCSC.hg19[['chr1']]
View(RepeatTable)
library(ShortRead)
library(csaw)
seq(1, 14, 5)
1000/60
# Source start script
#source('/home/hzudohna/L1polymORFgit/Scripts/_Start_L1polymORF_scg4.R')
source('D:/L1polymORFgit/Scripts/_Start_L1polymORF.R')
# Load necessary packages
library(Rsamtools)
library(rtracklayer)
library(BSgenome.Hsapiens.UCSC.hg19)
# Read repeat masker table for L1HS
L1Table <- read.csv("D:/L1polymORF/Data/L1HS_repeat_table_Hg19.csv", as.is = T)
L1Table$ChrNr <- substr(L1Table$genoName, 4, nchar(L1Table$genoName))
L1Table$genoStartMinus1000 <- L1Table$genoStart - 1000
L1Table$genoEndPlus1000    <- L1Table$genoEnd + 1000
View(L1Table)
