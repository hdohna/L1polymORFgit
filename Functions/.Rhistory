v2 <- c(3, 4, 2)
v1 <- 1:3
v2 <- c(3, 4, 2)
v1 %in% v2
match(v1, v2)
v1 %in% v2
v2 %in% v1
l1 <- list(a = 1:3, b = 1:10)
l1[1]
l1[[2]]
l1
l1$a
l1[1]
l1[[1]]
l1
l1$a
is(list[1])
is(l1[1])
is(l1[[1]])
l1 <- list(a = 1:3, b = 1:10, c = 5)
l1[1:2]
l1[[1:2]]
l1 <- list(a = 2:3, b = 1:10, c = 5)
l1[1:2]
l1[[1:2]]
l1 <- list(a = c("x", "y"), b = 1:10, c = 5)
l1[1:2]
l1[[1:2]]
l1[[1]][2]
l1[c(1, 3)]
l1[[c(1, 3)]]
l1 <- list(a = c("x", "y", "z"), b = 1:10, c = 5)
l1[[c(1, 3)]]
l1[[c(1:3)]]
l1 <- list(a = list(1, c("x", "y", "z")), b = 1:10, c = 5)
l1[[c(1:3)]]
# Load packages
library(Ryacas)
require("Ryacas")
# Set population size
n = 1000
# Set offset values for selection coefficient (not defined at s = 0) and
# allele frequency (not defined at y = 1/(2n))
sOffSet <- 0.006
yOffSet <- 10^(-10)
# Generate a sequence of values for the selection coefficient
sVals <- c(seq(-0.1, -sOffSet, 0.001), seq(sOffSet, 0.1, 0.001))
#
# -(exp(-x)*(e^x-1)*(e^(2*n*x)-e^(2*n*y*x)))/(n*(y-1)*y*x*(e^(2*n*x)-1))
fa <- function(x, y) -(exp(-x)*(exp(x)-1)*(exp(2*n*x)-exp(2*n*y*x)))/(n*(y-1)*y*x*(exp(2*n*x)-1))
fa(0.1, 0.5)
x = -0.1
y = 0.5
# The following code contains the equations for the allele frequency as
# function of the selection coefficient, as provided by Boissinot et al. (2006)
# Load packages
library(Ryacas)
require("Ryacas")
# Set population size
n = 1000
# Set offset values for selection coefficient (not defined at s = 0) and
# allele frequency (not defined at y = 1/(2n))
sOffSet <- 0.006
yOffSet <- 10^(-10)
# Generate a sequence of values for the selection coefficient
sVals <- c(seq(-0.1, -sOffSet, 0.001), seq(sOffSet, 0.1, 0.001))
#############
# I) y > 1/(2N) (where y denotes allele frequency)
#############
#
# -(exp(-x)*(e^x-1)*(e^(2*n*x)-e^(2*n*y*x)))/(n*(y-1)*y*x*(e^(2*n*x)-1))
fa <- function(x, y) -(exp(-x)*(exp(x)-1)*(exp(2*n*x)-exp(2*n*y*x)))/(n*(y-1)*y*x*(exp(2*n*x)-1))
fa(0.1, 0.5)
install.packages("expint")
library(expint)
install.packages("expint")
install.packages('expint', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(expint)
# R function for distribution of frequency as function of selection coefficient
FreqD <- function(y, s, N) {
exp(-s)*(((1 + sign(1/(2*N) - y)) / 2 * (exp(s) - exp(2*N*s))*(exp(2*N*s*y) - 1))
- (1 + sign(y - 1/(2*N))) / 2  * ((exp(s) - 1)*(exp(2*N*s) - exp(2*N*s*y)))) /
((exp(2*N*s) - 1)*N*s*(x - 1)*y)  /
((exp(-s)*(exp(2*N*s)-exp(s))*(log(abs(x-1)/abs(x))+expint_Ei(2*N*s*y)-exp(2*N*s)*expint_Ei(2*N*s*(x-1))))/(N*s*(exp(2*N*s)-1))
+ (exp(-s)*(exp(s)-1)*(exp(2*N*s)*(log(abs(x))+expint_Ei(2*N*s*(x-1))-log(abs(x-1)))-expint_Ei(2*N*s*y)))/(N*s*(exp(N*s)-1)*(exp(N*s)+1)))
}
FreqD(0.1, 0.1, 10^4)
FreqD(y = 0.1, s = 0.1, N = 10^4)
FreqD(y = 0.1, s = 0.01, N = 10^4)
yVals <- seq(0, 1, 0.1)
sapply(yVals, function(x) FreqD(x, s = 0.01, N = 10^4))
yVals <- seq(0, 1, 0.01)
sapply(yVals, function(x) FreqD(x, s = 0.01, N = 10^4))
Fvals <- sapply(yVals, function(x) FreqD(x, s = 0.01, N = 10^4))
plot(yVals, Fvals, type = "l")
Fvals1 <- sapply(yVals, function(x) FreqD(x, s = 0.01, N = 10^4))
Fvals2 <- sapply(yVals, function(x) FreqD(x, s = 0, N = 10^4))
Fvals2
Fvals3 <- sapply(yVals, function(x) FreqD(x, s = -0.01, N = 10^4))
plot(yVals, Fvals, type = "l")
plot(yVals, Fvals1, type = "l")
lines(yVals, Fvals3)
Fvals3
Fvals1
Fvals2 <- sapply(yVals, function(x) FreqD(x, s = 0.001, N = 10^4))
Fvals3 <- sapply(yVals, function(x) FreqD(x, s = -0.01, N = 10^4))
plot(yVals, Fvals1, type = "l")
lines(yVals, Fvals2)
plot(yVals, Fvals1, type = "l", col = "blue")
lines(yVals, Fvals2)
lines(yVals, Fvals3, col = "red")
plot(yVals, Fvals1, type = "l", col = "blue")
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
Fvals1 <- sapply(yVals, function(x) FreqD(x, s = 0.02, N = 10^4))
Fvals2 <- sapply(yVals, function(x) FreqD(x, s = 0.001, N = 10^4))
Fvals3 <- sapply(yVals, function(x) FreqD(x, s = -0.01, N = 10^4))
plot(yVals, Fvals1, type = "l", col = "blue")
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
yVals <- seq(0, 1, 0.01)
Fvals1 <- sapply(yVals, function(x) FreqD(x, s = 0.02, N = 10^4))
Fvals2 <- sapply(yVals, function(x) FreqD(x, s = 0.001, N = 10^4))
Fvals3 <- sapply(yVals, function(x) FreqD(x, s = 10^(-5), N = 10^4))
plot(yVals, Fvals1, type = "l", col = "blue")
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
yVals <- seq(0, 1, 0.01)
Fvals1 <- sapply(yVals, function(x) FreqD(x, s = 0.02, N = 10^4))
Fvals2 <- sapply(yVals, function(x) FreqD(x, s = 0.001, N = 10^4))
Fvals3 <- sapply(yVals, function(x) FreqD(x, s = 10^(-4), N = 10^4))
Fvals4 <- sapply(yVals, function(x) FreqD(x, s = 10^(-5), N = 10^4))
plot(yVals, Fvals1, type = "l", col = "blue")
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
lines(yVals, Fvals4, col = "orange")
Fvals1 <- sapply(yVals, function(x) FreqD(x, s = 0.02, N = 10^4))
Fvals2 <- sapply(yVals, function(x) FreqD(x, s = 0.001, N = 10^4))
Fvals3 <- sapply(yVals, function(x) FreqD(x, s = 10^(-4), N = 10^4))
Fvals4 <- sapply(yVals, function(x) FreqD(x, s = 10^(-5), N = 10^4))
Fvals5 <- sapply(yVals, function(x) FreqD(x, s = -0.001, N = 10^4))
plot(yVals, Fvals1, type = "l", col = "blue")
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
lines(yVals, Fvals4, col = "orange")
lines(yVals, Fvals5, col = "brown")
plot(yVals, Fvals1, type = "l", col = "blue", xlim = c(0, 0.2))
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
lines(yVals, Fvals4, col = "orange")
lines(yVals, Fvals5, col = "brown")
Fvals5
# R function for distribution of frequency as function of selection coefficient
FreqD <- function(y, s, N) {
exp(-s)*(((1 + sign(1/(2*N) - y)) / 2 * (exp(s) - exp(2*N*s))*(exp(2*N*s*y) - 1))
- (1 + sign(y - 1/(2*N))) / 2  * ((exp(s) - 1)*(exp(2*N*s) - exp(2*N*s*y)))) /
((exp(2*N*s) - 1)*N*s*(x - 1)*y)  /
((exp(-s)*(exp(2*N*s)-exp(s))*(log(abs(x-1)/abs(x))+expint_Ei(2*N*s*y)-exp(2*N*s)*expint_Ei(2*N*s*(x-1))))/(N*s*(exp(2*N*s)-1))
+ (exp(-s)*(exp(s)-1)*(exp(2*N*s)*(log(abs(x))+expint_Ei(2*N*s*(x-1))-log(abs(x-1)))-expint_Ei(2*N*s*y)))/(N*s*(exp(N*s)-1)*(exp(N*s)+1)))
}
# R function for distribution of frequency as function of selection coefficient
FreqD <- function(y, s, N) {
exp(-s)*(((1 + sign(1/(2*N) - y)) / 2 * (exp(s) - exp(2*N*s))*(exp(2*N*s*y) - 1))
- (1 + sign(y - 1/(2*N))) / 2  * ((exp(s) - 1)*(exp(2*N*s) - exp(2*N*s*y)))) /
((exp(2*N*s) - 1)*N*s*(y - 1)*y)  /
((exp(-s)*(exp(2*N*s)-exp(s))*(log(abs(y-1)/abs(y))+expint_Ei(2*N*s*y)-exp(2*N*s)*expint_Ei(2*N*s*(y-1))))/(N*s*(exp(2*N*s)-1))
+ (exp(-s)*(exp(s)-1)*(exp(2*N*s)*(log(abs(y))+expint_Ei(2*N*s*(y-1))-log(abs(y-1)))-expint_Ei(2*N*s*y)))/(N*s*(exp(N*s)-1)*(exp(N*s)+1)))
}
FreqD(y = 0.1, s = 0.01, N = 10^4)
FreqD(y = 0.1, s = 0.1, N = 10^4)
yVals <- seq(0, 1, 0.01)
library(expint)
# The equation below is from Bossinoit et al 2006 for online integration tools
# x < 1/2N
(e^(-s)*(e^s - e^(2*N*s))*(e^(2*N*s*x) - 1))/((e^(2*N*s) - 1)*N*s*(x - 1)*x)
# Result (https://www.integral-calculator.com/)
(e^(-s)*(e^(2*n*s)-e^s)*(ln(abs(x-1)/abs(x))+expintegral_ei(2*n*s*x)-e^(2*n*s)*expintegral_ei(2*n*s*(x-1))))/(n*s*(e^(2*n*s)-1))
# x > 1/2N
(-e^(-s)*(e^s - 1)*(e^(2*N*s) - e^(2*N*s*x)))/((e^(2*N*s) - 1)*N*s*(x - 1)*x)
# Result (https://www.integral-calculator.com/)
(e^(-s)*(e^s-1)*(e^(2*n*s)*(ln(abs(x))+expintegral_ei(2*n*s*(x-1))-ln(abs(x-1)))-expintegral_ei(2*n*s*x)))/(n*s*(e^(n*s)-1)*(e^(n*s)+1))
# R function for distribution of frequency as function of selection coefficient
FreqD <- function(y, s, N) {
exp(-s)*(((1 + sign(1/(2*N) - y)) / 2 * (exp(s) - exp(2*N*s))*(exp(2*N*s*y) - 1))
- (1 + sign(y - 1/(2*N))) / 2  * ((exp(s) - 1)*(exp(2*N*s) - exp(2*N*s*y)))) /
((exp(2*N*s) - 1)*N*s*(y - 1)*y)  /
((exp(-s)*(exp(2*N*s)-exp(s))*(log(abs(y-1)/abs(y))+expint_Ei(2*N*s*y)-exp(2*N*s)*expint_Ei(2*N*s*(y-1))))/(N*s*(exp(2*N*s)-1))
+ (exp(-s)*(exp(s)-1)*(exp(2*N*s)*(log(abs(y))+expint_Ei(2*N*s*(y-1))-log(abs(y-1)))-expint_Ei(2*N*s*y)))/(N*s*(exp(N*s)-1)*(exp(N*s)+1)))
}
FreqD(y = 0.1, s = 0.1, N = 10^4)
yVals <- seq(0, 1, 0.01)
Fvals1 <- sapply(yVals, function(x) FreqD(x, s = 0.02, N = 10^4))
Fvals2 <- sapply(yVals, function(x) FreqD(x, s = 0.001, N = 10^4))
Fvals3 <- sapply(yVals, function(x) FreqD(x, s = 10^(-4), N = 10^4))
Fvals4 <- sapply(yVals, function(x) FreqD(x, s = 10^(-5), N = 10^4))
Fvals5 <- sapply(yVals, function(x) FreqD(x, s = -0.001, N = 10^4))
plot(yVals, Fvals1, type = "l", col = "blue", xlim = c(0, 0.2))
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
lines(yVals, Fvals4, col = "orange")
lines(yVals, Fvals5, col = "brown")
FreqD_unst <- function(y, s, N) {
exp(-s)*(((1 + sign(1/(2*N) - y)) / 2 * (exp(s) - exp(2*N*s))*(exp(2*N*s*y) - 1))
- (1 + sign(y - 1/(2*N))) / 2  * ((exp(s) - 1)*(exp(2*N*s) - exp(2*N*s*y)))) /
((exp(2*N*s) - 1)*N*s*(x - 1)*y)
}
FreqD_unst <- function(y, s, N) {
exp(-s)*(((1 + sign(1/(2*N) - y)) / 2 * (exp(s) - exp(2*N*s))*(exp(2*N*s*y) - 1))
- (1 + sign(y - 1/(2*N))) / 2  * ((exp(s) - 1)*(exp(2*N*s) - exp(2*N*s*y)))) /
((exp(2*N*s) - 1)*N*s*(y - 1)*y)
}
FreqD_unst(y = 0.1, s = 0.1, N = 10^4)
FreqD_unst(y = 0.1, s = 0.01, N = 10^4)
FreqD_unst(y = 0.1, s = 0.05, N = 10^4)
sum(sapply(yVals, function(y) y * FreqD_unst(y, s, N))) /
sum(yVals)
MeanY <- function(yVals, s, N){
sum(sapply(yVals, function(y) y * FreqD_unst(y, s, N))) /
sum(yVals)
}
MeanY(y = seq(0, 1, 0.1), s = 0.05, N = 10^4)
MeanY <- function(yVals, s, N){
FreqVals <- sapply(yVals, function(y) y * FreqD_unst(y, s, N))
if (any(is.na(FreqVals))){
warning(sum(is.na(FreqVals)), "frequency values are NA\na")
}
sum(FreqVals[!is.na(FreqVals)]) /
sum(yVals[!is.na(FreqVals)])
}
MeanY(y = seq(0, 1, 0.1), s = 0.05, N = 10^4)
MeanY(y = seq(0, 1, 0.1), s = 0.01, N = 10^4)
MeanY <- function(yVals, s, N){
FreqVals <- sapply(yVals, function(y) y * FreqD_unst(y, s, N))
if (any(is.na(FreqVals))){
warning(sum(is.na(FreqVals)), " frequency values are NA\na")
}
sum(FreqVals[!is.na(FreqVals)]) /
sum(yVals[!is.na(FreqVals)])
}
MeanY(y = seq(0, 1, 0.1), s = 0.01, N = 10^4)
YperSel <- sapply(seq(-0.01, 0.01, 0.001), function(x){
MeanY(y = seq(0, 1, 0.01), s = 0.01, N = 10^4)
})
YperSel
MeanY(y = seq(0, 1, 0.01), s = x, N = 10^4)
YperSel <- sapply(seq(-0.01, 0.01, 0.001), function(x){
MeanY(y = seq(0, 1, 0.01), s = x, N = 10^4)
})
plot(YperSel)
plot(log(YperSel) )
SelVals <- seq(-0.02, 0.02, 0.001)
YperSel <- sapply(SelVals, function(x){
MeanY(y = seq(0, 1, 0.01), s = x, N = 10^4)
})
plot(SelVals, YperSel)
SelVals <- seq(-0.03, 0.03, 0.001)
YperSel <- sapply(SelVals, function(x){
MeanY(y = seq(0, 1, 0.01), s = x, N = 10^4)
})
SelVals <- seq(-0.03, 0.03, 0.001)
YperSel <- sapply(SelVals, function(x){
MeanY(y = seq(0, 1, 0.01), s = x, N = 10^4)
})
plot(SelVals, YperSel)
SelVals <- seq(-0.04, 0.04, 0.001)
YperSel <- sapply(SelVals, function(x){
MeanY(y = seq(0, 1, 0.01), s = x, N = 10^4)
})
plot(SelVals, YperSel)
YperSel
# Plot mean frequency per selection value
SelVals <- seq(-0.03, 0.03, 0.001)
YperSel <- sapply(SelVals, function(x){
MeanY(y = seq(0, 1, 0.01), s = x, N = 10^4)
})
plot(SelVals, YperSel)
plot(SelVals, YperSel, type = "l")
plot(SelVals, log10(YperSel), type = "l")
integrate(FreqD_unst(x, 0.01, 10^4), 0, 1)
integrate(function(x) FreqD_unst(x, 0.01, 10^4), 0, 1)
FreqD_unst(y, s, N) / integrate(function(x) FreqD_unst(x, s, N), 0, 1)$value
FreqD_st <- function(y, s, N){
FreqD_unst(y, s, N) / integrate(function(x) FreqD_unst(x, s, N), 0, 1)$value
}
FreqD_st(0.1, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_st(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_st(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_st(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_st(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_st(x, s = -0.001, N = 10^4))
plot(yVals, Fvals1, type = "l", col = "blue", xlim = c(0, 0.2))
lines(yVals, Fvals2, col = "green")
lines(yVals, Fvals3, col = "red")
lines(yVals, Fvals4, col = "orange")
Fvals_st1 <- sapply(yVals, function(x) FreqD_st(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_st(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_st(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_st(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_st(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue", xlim = c(0, 0.2))
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
y * FreqD_st(y, s, N) / integrate(function(x) FreqD_st(x, s, N), 0, 1)$value
FreqD_sample <- function(y, s, N){
y * FreqD_st(y, s, N) / integrate(function(x) FreqD_st(x, s, N), 0, 1)$value
}
FreqD_st(0.1, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
FreqD_sample <- function(y, s, N, SampleSize = 10^3){
(1 - (1 - y)^SampleSize) * FreqD_st(y, s, N) / integrate(function(x) FreqD_st(x, s, N), 0, 1)$value
}
FreqD_st(0.1, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
FreqD_sample <- function(y, s, N, SampleSize = 10^3){
(1 - (1 - y)^SampleSize) * FreqD_st(y, s, N) /
integrate(function(x) (1 - (1 - y)^SampleSize) * FreqD_st(x, s, N), 0, 1)$value
}
FreqD_st(0.1, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
# Log-likelihood
LogLik <- function(Freqs, Counts, s, N){
if (length(Freqs) != length(Counts)){
stop("Freqs and Counts vector have to have the same length\n")
}
SampleSize <- sum(Counts)
sum(sapply(1:length(Freqs), function(i){
Counts[i] * log(FreqD_sample(Freqs[i]/SampleSize, s, N,
SampleSize = SampleSize))
}))
}
# Log-likelihood
LogLik <- function(Freqs, Counts, s, N){
if (length(Freqs) != length(Counts)){
stop("Freqs and Counts vector have to have the same length\n")
}
SampleSize <- sum(Counts)
sum(sapply(1:length(Freqs), function(i){
Counts[i] * log(FreqD_sample(Freqs[i]/SampleSize, s, N,
SampleSize = SampleSize))
}))
}
LogLik(Freqs = c(0, 1), Counts = c(100, 10), s= 0, N = 10^4)
LogLik(Freqs = c(0, 1), Counts = c(100, 10), s = 0.1, N = 10^4)
LogLik(Freqs = c(0, 1), Counts = c(100, 10), s = 0.01, N = 10^4)
LogLik(Freqs = c(0, 1), Counts = c(100, 10), s = 0.001, N = 10^4)
FreqD_unst(y, s, N) / integrate(function(x) FreqD_unst(x, s, N), 0, 1)$value
FreqD_st <- function(y, s, N){
FreqD_unst(y, s, N) / integrate(function(x) FreqD_unst(x, s, N), 0, 1)$value
}
FreqD_sample <- function(y, s, N, SampleSize = 10^3){
(1 - (1 - y)^SampleSize) * FreqD_st(y, s, N) /
integrate(function(x) (1 - (1 - y)^SampleSize) * FreqD_st(x, s, N), 0, 1)$value
}
FreqD_st(0.1, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = 0, N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = -0.001, N = 10^4))
LogLik(Freqs = c(0, 1), Counts = c(100, 10), s = 0.001, N = 10^4)
LogLik(Freqs = c(0, 1), Counts = c(100, 10), s = 10^(-4), N = 10^4)
FreqD_sample(0, s = 10^(-4), N = 10^4,
SampleSize = 110)
FreqD_sample(1/110, s = 10^(-4), N = 10^4,
SampleSize = 110)
Fvals_st1
FreqD_st(0, 0.01, 10^4)
FreqD_unst(0, 0.01, 10^4)
LogLik(Freqs = c(1, 2), Counts = c(100, 10), s = 10^(-4), N = 10^4)
FreqD_sample(1/110, s = 10^(-4), N = 10^4,
SampleSize = 110)
FreqD_sample <- function(y, s, N, SampleSize = 10^3){
(1 - (1 - y)^SampleSize) * FreqD_st(y, s, N) /
integrate(function(x) (1 - (1 - x)^SampleSize) * FreqD_st(x, s, N), 0, 1)$value
}
FreqD_st(0, 0.01, 10^4)
FreqD_unst(0, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = 0, N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
# Log-likelihood
LogLik <- function(Freqs, Counts, s, N){
if (length(Freqs) != length(Counts)){
stop("Freqs and Counts vector have to have the same length\n")
}
SampleSize <- sum(Counts)
sum(sapply(1:length(Freqs), function(i){
Counts[i] * log(FreqD_sample(Freqs[i]/SampleSize, s, N,
SampleSize = SampleSize))
}))
}
LogLik(Freqs = c(1, 2), Counts = c(100, 10), s = 10^(-4), N = 10^4)
FreqD_sample(1/110, s = 10^(-4), N = 10^4,
SampleSize = 110)
FreqD_st <- function(y, s, N){
FreqD_unst(y, s, N) / integrate(function(x) FreqD_unst(x, s, N), 0, 1)$value
}
LogLik(Freqs = c(1, 2), Counts = c(100, 10), s = 10^(-4), N = 10^4)
FreqD_sample2 <- function(y, s, N, SampleSize = 10^3){
(1 - (1 - y)^SampleSize) * FreqD_unst(y, s, N) /
integrate(function(x) (1 - (1 - x)^SampleSize) * FreqD_unst(x, s, N), 0, 1)$value
}
FreqD_sample2 <- function(y, s, N, SampleSize = 10^3){
(1 - (1 - y)^SampleSize) * FreqD_unst(y, s, N) /
integrate(function(x) (1 - (1 - x)^SampleSize) * FreqD_unst(x, s, N), 0, 1)$value
}
FreqD_st(0, 0.01, 10^4)
FreqD_unst(0, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_sample2(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_sample2(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_sample2(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_sample2(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample2(x, s = 0, N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample2(x, s = -0.001, N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample2(x, s = 0, N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample2(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
FreqD_sample2(0.1, s = -0.001, N = 10^4)
FreqD_sample1(0.1, s = -0.001, N = 10^4)
FreqD_sample(0.1, s = -0.001, N = 10^4)
FreqD_sample <- function(y, s, N, SampleSize = 10^3){
(1 - (1 - y)^SampleSize) * FreqD_unst(y, s, N) /
integrate(function(x) (1 - (1 - x)^SampleSize) * FreqD_unst(x, s, N), 0, 1)$value
}
FreqD_st(0, 0.01, 10^4)
FreqD_unst(0, 0.01, 10^4)
Fvals_st1 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.02, N = 10^4))
Fvals_st2 <- sapply(yVals, function(x) FreqD_sample(x, s = 0.001, N = 10^4))
Fvals_st3 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-4), N = 10^4))
Fvals_st4 <- sapply(yVals, function(x) FreqD_sample(x, s = 10^(-5), N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = 0, N = 10^4))
Fvals_st5 <- sapply(yVals, function(x) FreqD_sample(x, s = -0.001, N = 10^4))
plot(yVals, Fvals_st1, type = "l", col = "blue")
lines(yVals, Fvals_st2, col = "green")
lines(yVals, Fvals_st3, col = "red")
lines(yVals, Fvals_st4, col = "orange")
lines(yVals, Fvals_st5, col = "brown")
FreqD_sample2(0.1, s = -0.001, N = 10^4)
FreqD_sample(0.1, s = -0.001, N = 10^4)
FreqD_sample(0.1, s = 0.001, N = 10^4)
FreqD_sample2(0.1, s = 0.001, N = 10^4)
FreqD_sample(0.1, s = 0.001, N = 10^4)
# Log-likelihood
LogLik <- function(Freqs, Counts, s, N){
if (length(Freqs) != length(Counts)){
stop("Freqs and Counts vector have to have the same length\n")
}
SampleSize <- sum(Counts)
sum(sapply(1:length(Freqs), function(i){
Counts[i] * log(FreqD_sample(Freqs[i]/SampleSize, s, N,
SampleSize = SampleSize))
}))
}
LogLik(Freqs = c(1, 2), Counts = c(100, 10), s = 10^(-4), N = 10^4)
